// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("GroupMembers", testGroupMembers)
	t.Run("Groups", testGroups)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("GroupMembers", testGroupMembersDelete)
	t.Run("Groups", testGroupsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("GroupMembers", testGroupMembersQueryDeleteAll)
	t.Run("Groups", testGroupsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("GroupMembers", testGroupMembersSliceDeleteAll)
	t.Run("Groups", testGroupsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("GroupMembers", testGroupMembersExists)
	t.Run("Groups", testGroupsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("GroupMembers", testGroupMembersFind)
	t.Run("Groups", testGroupsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("GroupMembers", testGroupMembersBind)
	t.Run("Groups", testGroupsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("GroupMembers", testGroupMembersOne)
	t.Run("Groups", testGroupsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("GroupMembers", testGroupMembersAll)
	t.Run("Groups", testGroupsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("GroupMembers", testGroupMembersCount)
	t.Run("Groups", testGroupsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("GroupMembers", testGroupMembersHooks)
	t.Run("Groups", testGroupsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("GroupMembers", testGroupMembersInsert)
	t.Run("GroupMembers", testGroupMembersInsertWhitelist)
	t.Run("Groups", testGroupsInsert)
	t.Run("Groups", testGroupsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("GroupMemberToGroupUsingGroup", testGroupMemberToOneGroupUsingGroup)
	t.Run("GroupMemberToUserUsingUser", testGroupMemberToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("GroupToGroupMembers", testGroupToManyGroupMembers)
	t.Run("UserToGroupMembers", testUserToManyGroupMembers)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("GroupMemberToGroupUsingGroupMembers", testGroupMemberToOneSetOpGroupUsingGroup)
	t.Run("GroupMemberToUserUsingGroupMembers", testGroupMemberToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("GroupToGroupMembers", testGroupToManyAddOpGroupMembers)
	t.Run("UserToGroupMembers", testUserToManyAddOpGroupMembers)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("GroupMembers", testGroupMembersReload)
	t.Run("Groups", testGroupsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("GroupMembers", testGroupMembersReloadAll)
	t.Run("Groups", testGroupsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("GroupMembers", testGroupMembersSelect)
	t.Run("Groups", testGroupsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("GroupMembers", testGroupMembersUpdate)
	t.Run("Groups", testGroupsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("GroupMembers", testGroupMembersSliceUpdateAll)
	t.Run("Groups", testGroupsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
