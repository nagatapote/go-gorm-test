// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGroupMembers(t *testing.T) {
	t.Parallel()

	query := GroupMembers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGroupMembersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupMember{}
	if err = randomize.Struct(seed, o, groupMemberDBTypes, true, groupMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GroupMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGroupMembersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupMember{}
	if err = randomize.Struct(seed, o, groupMemberDBTypes, true, groupMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GroupMembers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GroupMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGroupMembersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupMember{}
	if err = randomize.Struct(seed, o, groupMemberDBTypes, true, groupMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GroupMemberSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GroupMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGroupMembersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupMember{}
	if err = randomize.Struct(seed, o, groupMemberDBTypes, true, groupMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GroupMemberExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if GroupMember exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GroupMemberExists to return true, but got false.")
	}
}

func testGroupMembersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupMember{}
	if err = randomize.Struct(seed, o, groupMemberDBTypes, true, groupMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	groupMemberFound, err := FindGroupMember(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if groupMemberFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGroupMembersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupMember{}
	if err = randomize.Struct(seed, o, groupMemberDBTypes, true, groupMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GroupMembers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGroupMembersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupMember{}
	if err = randomize.Struct(seed, o, groupMemberDBTypes, true, groupMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GroupMembers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGroupMembersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	groupMemberOne := &GroupMember{}
	groupMemberTwo := &GroupMember{}
	if err = randomize.Struct(seed, groupMemberOne, groupMemberDBTypes, false, groupMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupMember struct: %s", err)
	}
	if err = randomize.Struct(seed, groupMemberTwo, groupMemberDBTypes, false, groupMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = groupMemberOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = groupMemberTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GroupMembers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGroupMembersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	groupMemberOne := &GroupMember{}
	groupMemberTwo := &GroupMember{}
	if err = randomize.Struct(seed, groupMemberOne, groupMemberDBTypes, false, groupMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupMember struct: %s", err)
	}
	if err = randomize.Struct(seed, groupMemberTwo, groupMemberDBTypes, false, groupMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = groupMemberOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = groupMemberTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GroupMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func groupMemberBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *GroupMember) error {
	*o = GroupMember{}
	return nil
}

func groupMemberAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *GroupMember) error {
	*o = GroupMember{}
	return nil
}

func groupMemberAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *GroupMember) error {
	*o = GroupMember{}
	return nil
}

func groupMemberBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GroupMember) error {
	*o = GroupMember{}
	return nil
}

func groupMemberAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GroupMember) error {
	*o = GroupMember{}
	return nil
}

func groupMemberBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GroupMember) error {
	*o = GroupMember{}
	return nil
}

func groupMemberAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GroupMember) error {
	*o = GroupMember{}
	return nil
}

func groupMemberBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GroupMember) error {
	*o = GroupMember{}
	return nil
}

func groupMemberAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GroupMember) error {
	*o = GroupMember{}
	return nil
}

func testGroupMembersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &GroupMember{}
	o := &GroupMember{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, groupMemberDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GroupMember object: %s", err)
	}

	AddGroupMemberHook(boil.BeforeInsertHook, groupMemberBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	groupMemberBeforeInsertHooks = []GroupMemberHook{}

	AddGroupMemberHook(boil.AfterInsertHook, groupMemberAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	groupMemberAfterInsertHooks = []GroupMemberHook{}

	AddGroupMemberHook(boil.AfterSelectHook, groupMemberAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	groupMemberAfterSelectHooks = []GroupMemberHook{}

	AddGroupMemberHook(boil.BeforeUpdateHook, groupMemberBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	groupMemberBeforeUpdateHooks = []GroupMemberHook{}

	AddGroupMemberHook(boil.AfterUpdateHook, groupMemberAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	groupMemberAfterUpdateHooks = []GroupMemberHook{}

	AddGroupMemberHook(boil.BeforeDeleteHook, groupMemberBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	groupMemberBeforeDeleteHooks = []GroupMemberHook{}

	AddGroupMemberHook(boil.AfterDeleteHook, groupMemberAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	groupMemberAfterDeleteHooks = []GroupMemberHook{}

	AddGroupMemberHook(boil.BeforeUpsertHook, groupMemberBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	groupMemberBeforeUpsertHooks = []GroupMemberHook{}

	AddGroupMemberHook(boil.AfterUpsertHook, groupMemberAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	groupMemberAfterUpsertHooks = []GroupMemberHook{}
}

func testGroupMembersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupMember{}
	if err = randomize.Struct(seed, o, groupMemberDBTypes, true, groupMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GroupMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGroupMembersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupMember{}
	if err = randomize.Struct(seed, o, groupMemberDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GroupMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(groupMemberColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GroupMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGroupMemberToOneGroupUsingGroup(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local GroupMember
	var foreign Group

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, groupMemberDBTypes, false, groupMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupMember struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, groupDBTypes, false, groupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Group struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GroupID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Group().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GroupMemberSlice{&local}
	if err = local.L.LoadGroup(ctx, tx, false, (*[]*GroupMember)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Group == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Group = nil
	if err = local.L.LoadGroup(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Group == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testGroupMemberToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local GroupMember
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, groupMemberDBTypes, false, groupMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupMember struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GroupMemberSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*GroupMember)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testGroupMemberToOneSetOpGroupUsingGroup(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GroupMember
	var b, c Group

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, groupMemberDBTypes, false, strmangle.SetComplement(groupMemberPrimaryKeyColumns, groupMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, groupDBTypes, false, strmangle.SetComplement(groupPrimaryKeyColumns, groupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, groupDBTypes, false, strmangle.SetComplement(groupPrimaryKeyColumns, groupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Group{&b, &c} {
		err = a.SetGroup(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Group != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GroupMembers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GroupID != x.ID {
			t.Error("foreign key was wrong value", a.GroupID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GroupID))
		reflect.Indirect(reflect.ValueOf(&a.GroupID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GroupID != x.ID {
			t.Error("foreign key was wrong value", a.GroupID, x.ID)
		}
	}
}
func testGroupMemberToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GroupMember
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, groupMemberDBTypes, false, strmangle.SetComplement(groupMemberPrimaryKeyColumns, groupMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GroupMembers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testGroupMembersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupMember{}
	if err = randomize.Struct(seed, o, groupMemberDBTypes, true, groupMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGroupMembersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupMember{}
	if err = randomize.Struct(seed, o, groupMemberDBTypes, true, groupMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GroupMemberSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGroupMembersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupMember{}
	if err = randomize.Struct(seed, o, groupMemberDBTypes, true, groupMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GroupMembers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	groupMemberDBTypes = map[string]string{`ID`: `bigint`, `UserID`: `integer`, `GroupID`: `integer`, `Role`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_                  = bytes.MinRead
)

func testGroupMembersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(groupMemberPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(groupMemberAllColumns) == len(groupMemberPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GroupMember{}
	if err = randomize.Struct(seed, o, groupMemberDBTypes, true, groupMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GroupMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, groupMemberDBTypes, true, groupMemberPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GroupMember struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGroupMembersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(groupMemberAllColumns) == len(groupMemberPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GroupMember{}
	if err = randomize.Struct(seed, o, groupMemberDBTypes, true, groupMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GroupMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, groupMemberDBTypes, true, groupMemberPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GroupMember struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(groupMemberAllColumns, groupMemberPrimaryKeyColumns) {
		fields = groupMemberAllColumns
	} else {
		fields = strmangle.SetComplement(
			groupMemberAllColumns,
			groupMemberPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GroupMemberSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGroupMembersUpsert(t *testing.T) {
	t.Parallel()

	if len(groupMemberAllColumns) == len(groupMemberPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GroupMember{}
	if err = randomize.Struct(seed, &o, groupMemberDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GroupMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GroupMember: %s", err)
	}

	count, err := GroupMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, groupMemberDBTypes, false, groupMemberPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GroupMember struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GroupMember: %s", err)
	}

	count, err = GroupMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
