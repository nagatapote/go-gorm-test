// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSampleTables(t *testing.T) {
	t.Parallel()

	query := SampleTables()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSampleTablesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SampleTable{}
	if err = randomize.Struct(seed, o, sampleTableDBTypes, true, sampleTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SampleTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SampleTables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSampleTablesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SampleTable{}
	if err = randomize.Struct(seed, o, sampleTableDBTypes, true, sampleTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SampleTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SampleTables().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SampleTables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSampleTablesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SampleTable{}
	if err = randomize.Struct(seed, o, sampleTableDBTypes, true, sampleTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SampleTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SampleTableSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SampleTables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSampleTablesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SampleTable{}
	if err = randomize.Struct(seed, o, sampleTableDBTypes, true, sampleTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SampleTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SampleTableExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SampleTable exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SampleTableExists to return true, but got false.")
	}
}

func testSampleTablesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SampleTable{}
	if err = randomize.Struct(seed, o, sampleTableDBTypes, true, sampleTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SampleTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	sampleTableFound, err := FindSampleTable(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if sampleTableFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSampleTablesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SampleTable{}
	if err = randomize.Struct(seed, o, sampleTableDBTypes, true, sampleTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SampleTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SampleTables().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSampleTablesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SampleTable{}
	if err = randomize.Struct(seed, o, sampleTableDBTypes, true, sampleTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SampleTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SampleTables().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSampleTablesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sampleTableOne := &SampleTable{}
	sampleTableTwo := &SampleTable{}
	if err = randomize.Struct(seed, sampleTableOne, sampleTableDBTypes, false, sampleTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SampleTable struct: %s", err)
	}
	if err = randomize.Struct(seed, sampleTableTwo, sampleTableDBTypes, false, sampleTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SampleTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sampleTableOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sampleTableTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SampleTables().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSampleTablesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	sampleTableOne := &SampleTable{}
	sampleTableTwo := &SampleTable{}
	if err = randomize.Struct(seed, sampleTableOne, sampleTableDBTypes, false, sampleTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SampleTable struct: %s", err)
	}
	if err = randomize.Struct(seed, sampleTableTwo, sampleTableDBTypes, false, sampleTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SampleTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sampleTableOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sampleTableTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SampleTables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func sampleTableBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SampleTable) error {
	*o = SampleTable{}
	return nil
}

func sampleTableAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SampleTable) error {
	*o = SampleTable{}
	return nil
}

func sampleTableAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SampleTable) error {
	*o = SampleTable{}
	return nil
}

func sampleTableBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SampleTable) error {
	*o = SampleTable{}
	return nil
}

func sampleTableAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SampleTable) error {
	*o = SampleTable{}
	return nil
}

func sampleTableBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SampleTable) error {
	*o = SampleTable{}
	return nil
}

func sampleTableAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SampleTable) error {
	*o = SampleTable{}
	return nil
}

func sampleTableBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SampleTable) error {
	*o = SampleTable{}
	return nil
}

func sampleTableAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SampleTable) error {
	*o = SampleTable{}
	return nil
}

func testSampleTablesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SampleTable{}
	o := &SampleTable{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, sampleTableDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SampleTable object: %s", err)
	}

	AddSampleTableHook(boil.BeforeInsertHook, sampleTableBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	sampleTableBeforeInsertHooks = []SampleTableHook{}

	AddSampleTableHook(boil.AfterInsertHook, sampleTableAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	sampleTableAfterInsertHooks = []SampleTableHook{}

	AddSampleTableHook(boil.AfterSelectHook, sampleTableAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	sampleTableAfterSelectHooks = []SampleTableHook{}

	AddSampleTableHook(boil.BeforeUpdateHook, sampleTableBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	sampleTableBeforeUpdateHooks = []SampleTableHook{}

	AddSampleTableHook(boil.AfterUpdateHook, sampleTableAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	sampleTableAfterUpdateHooks = []SampleTableHook{}

	AddSampleTableHook(boil.BeforeDeleteHook, sampleTableBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	sampleTableBeforeDeleteHooks = []SampleTableHook{}

	AddSampleTableHook(boil.AfterDeleteHook, sampleTableAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	sampleTableAfterDeleteHooks = []SampleTableHook{}

	AddSampleTableHook(boil.BeforeUpsertHook, sampleTableBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	sampleTableBeforeUpsertHooks = []SampleTableHook{}

	AddSampleTableHook(boil.AfterUpsertHook, sampleTableAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	sampleTableAfterUpsertHooks = []SampleTableHook{}
}

func testSampleTablesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SampleTable{}
	if err = randomize.Struct(seed, o, sampleTableDBTypes, true, sampleTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SampleTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SampleTables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSampleTablesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SampleTable{}
	if err = randomize.Struct(seed, o, sampleTableDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SampleTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(sampleTableColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SampleTables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSampleTablesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SampleTable{}
	if err = randomize.Struct(seed, o, sampleTableDBTypes, true, sampleTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SampleTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSampleTablesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SampleTable{}
	if err = randomize.Struct(seed, o, sampleTableDBTypes, true, sampleTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SampleTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SampleTableSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSampleTablesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SampleTable{}
	if err = randomize.Struct(seed, o, sampleTableDBTypes, true, sampleTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SampleTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SampleTables().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	sampleTableDBTypes = map[string]string{`ID`: `integer`, `Name`: `character varying`, `Description`: `character varying`}
	_                  = bytes.MinRead
)

func testSampleTablesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(sampleTablePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(sampleTableAllColumns) == len(sampleTablePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SampleTable{}
	if err = randomize.Struct(seed, o, sampleTableDBTypes, true, sampleTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SampleTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SampleTables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sampleTableDBTypes, true, sampleTablePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SampleTable struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSampleTablesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(sampleTableAllColumns) == len(sampleTablePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SampleTable{}
	if err = randomize.Struct(seed, o, sampleTableDBTypes, true, sampleTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SampleTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SampleTables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sampleTableDBTypes, true, sampleTablePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SampleTable struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(sampleTableAllColumns, sampleTablePrimaryKeyColumns) {
		fields = sampleTableAllColumns
	} else {
		fields = strmangle.SetComplement(
			sampleTableAllColumns,
			sampleTablePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SampleTableSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSampleTablesUpsert(t *testing.T) {
	t.Parallel()

	if len(sampleTableAllColumns) == len(sampleTablePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SampleTable{}
	if err = randomize.Struct(seed, &o, sampleTableDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SampleTable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SampleTable: %s", err)
	}

	count, err := SampleTables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, sampleTableDBTypes, false, sampleTablePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SampleTable struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SampleTable: %s", err)
	}

	count, err = SampleTables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
